# -*- coding: utf-8 -*-
"""employee-attrition-predictor-app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11h6geLYLy0_MeC01-TCQQMUfylKt9haD
"""

# app.py

import streamlit as st
import pandas as pd
import numpy as np
import joblib
import shap
import json
import matplotlib.pyplot as plt
from datetime import datetime
from io import BytesIO

# Load models
xgb = joblib.load("models/xgboost_optimized_model.pkl")
rf = joblib.load("models/random_forest_model.pkl")
logreg = joblib.load("models/logistic_regression_model.pkl")

models = {
    "XGBoost": xgb,
    "Random Forest": rf,
    "Logistic Regression": logreg
}

# Load model input features
with open("models/model_features.json", "r") as f:
    model_features = json.load(f)

# Default model
selected_model_name = st.sidebar.selectbox("🔍 Select Model", list(models.keys()))
model = models[selected_model_name]
explainer = shap.TreeExplainer(model)

# App config
st.set_page_config(page_title="Employee Attrition Predictor", layout="centered")
st.title("Employee Attrition Predictor")
st.markdown("Predict employee turnover and get psychological insights using interpretable AI.")

# Session state
if "history" not in st.session_state:
    st.session_state["history"] = []

# Sample toggle
use_sample = st.checkbox("🔁 Use Sample Employee Data")

# Sidebar input
st.sidebar.header("📋 Enter Employee Information")

def user_input():
    if use_sample:
        values = {
            "Age": 28,
            "MonthlyIncome": 4800,
            "OverTime_Yes": 1,
            "JobSatisfaction": 2,
            "EnvironmentSatisfaction": 2,
            "DistanceFromHome": 20,
            "BusinessTravel_Travel_Frequently": 1,
            "NumCompaniesWorked": 4,
            "StockOptionLevel": 0,
            "YearsWithCurrManager": 1,
            "WorkLifeBalance": 2
        }
    else:
        values = {
            "Age": st.sidebar.slider("Age", 18, 60, 35, help="Employee's age in years."),
            "MonthlyIncome": st.sidebar.slider("Monthly Income", 1000, 20000, 5000, help="Monthly salary in USD."),
            "OverTime_Yes": 1 if st.sidebar.selectbox("Works Overtime?", ["Yes", "No"], help="Overtime work status.") == "Yes" else 0,
            "JobSatisfaction": st.sidebar.slider("Job Satisfaction (1-4)", 1, 4, 3, help="Job satisfaction level."),
            "EnvironmentSatisfaction": st.sidebar.slider("Environment Satisfaction (1-4)", 1, 4, 3, help="Workplace environment rating."),
            "DistanceFromHome": st.sidebar.slider("Distance From Home", 1, 50, 10, help="Commute distance in kilometers."),
            "BusinessTravel_Travel_Frequently": 1 if st.sidebar.selectbox("Travels Frequently?", ["Yes", "No"], help="Frequent business travel status.") == "Yes" else 0,
            "NumCompaniesWorked": st.sidebar.slider("Companies Worked", 0, 10, 2, help="Number of previous employers."),
            "StockOptionLevel": st.sidebar.slider("Stock Option Level", 0, 3, 1, help="Company stock option level."),
            "YearsWithCurrManager": st.sidebar.slider("Years with Current Manager", 0, 20, 4, help="Tenure with current manager."),
            "WorkLifeBalance": st.sidebar.slider("Work-Life Balance (1-4)", 1, 4, 3, help="Work-life balance rating.")
        }

    if st.sidebar.button("🔄 Reset Form"):
        st.rerun()

    return pd.DataFrame([values])

# Upload for batch
uploaded_file = st.sidebar.file_uploader("📂 Upload CSV for Batch Prediction", type=["csv"])

if uploaded_file:
    df = pd.read_csv(uploaded_file)
    df = df.reindex(columns=model_features, fill_value=0)
    preds = model.predict(df)
    probs = model.predict_proba(df)[:, 1]
    df["Attrition Prediction"] = np.where(preds == 1, "Yes", "No")
    df["Probability"] = probs
    st.subheader("📊 Batch Prediction Results")
    st.dataframe(df)
else:
    input_df = user_input()
    input_df = input_df.reindex(columns=model_features)

    # Prediction
    prediction = model.predict(input_df)[0]
    probability = model.predict_proba(input_df)[0][1]

    # Risk Category
    if probability >= 0.60:
        risk_label = "🔴 High Risk"
    elif probability >= 0.30:
        risk_label = "🟡 Moderate Risk"
    else:
        risk_label = "🟢 Low Risk"

    # Display
    st.subheader("🎯 Prediction Result")
    st.metric("Attrition Risk", f"{probability:.2%}", help="Estimated likelihood of employee leaving.")
    st.write("Prediction:", "🔴 Yes" if prediction == 1 else "🟢 No")
    st.write("Risk Category:", risk_label)

    # SHAP checkbox
    if st.checkbox("📊 Show SHAP Explanation"):
        shap_values = explainer.shap_values(input_df)

        # Force Plot
        st.subheader("SHAP Force Plot")
        plt.clf()
        shap.force_plot(explainer.expected_value, shap_values[0], input_df.iloc[0], matplotlib=True, show=False)
        st.pyplot(plt.gcf())

        # Summary Bar
        st.subheader("SHAP Feature Importance (Bar)")
        plt.clf()
        shap.summary_plot(shap_values, input_df, plot_type="bar", show=False)
        st.pyplot(plt.gcf())

        # Beeswarm
        st.subheader("SHAP Summary (Beeswarm)")
        plt.clf()
        shap.summary_plot(shap_values, input_df, show=False)
        st.pyplot(plt.gcf())

        # Feature-specific SHAP viewer
        feature_selected = st.selectbox("🔎 View SHAP Impact for a Feature", input_df.columns)
        plt.clf()
        shap.dependence_plot(feature_selected, shap_values, input_df, show=False)
        st.pyplot(plt.gcf())

    # HR Recommendations
    st.subheader("📌 HR Strategy Recommendation")
    if prediction == 1:
        if probability >= 0.60:
            st.warning("🔴 This employee is at **high risk** of leaving. Consider offering flexible hours, career mentoring, or managerial support.")
        else:
            st.info("🟡 Moderate risk. A 1:1 conversation or job redesign may improve retention.")
    else:
        st.success("🟢 Low attrition risk. Continue current engagement strategies.")

    # Chatbot-style Tips
    with st.expander("🤖 HR Assistant Tips"):
        st.markdown("""
        - **Age + Low Satisfaction** often predicts burnout — offer support or flexible roles.
        - **Overtime + Travel** increases risk — monitor workload.
        - **Low Work-Life Balance** consistently shows high SHAP impact — check team norms.
        - Use SHAP plots to see why this prediction occurred — this adds explainability to your decision-making.
        """)

    # Save to history
    if st.button("💾 Save Prediction"):
        record = input_df.copy()
        record["Prediction"] = "Yes" if prediction == 1 else "No"
        record["Probability"] = probability
        st.session_state["history"].append(record)
        st.success("Prediction saved.")

# Show history
if st.session_state["history"]:
    st.subheader("📚 Prediction History")
    hist_df = pd.concat(st.session_state["history"], ignore_index=True)
    st.dataframe(hist_df)

    buffer = BytesIO()
    hist_df.to_csv(buffer, index=False)
    st.download_button("📥 Download History as CSV", buffer.getvalue(), f"prediction_history_{datetime.now().strftime('%Y%m%d')}.csv", "text/csv")