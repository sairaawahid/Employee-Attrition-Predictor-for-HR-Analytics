# -*- coding: utf-8 -*-
"""employee-attrition-predictor-app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11h6geLYLy0_MeC01-TCQQMUfylKt9haD
"""

# app.py

import streamlit as st
import pandas as pd
import numpy as np
import joblib
import shap
import json
import matplotlib.pyplot as plt
from io import StringIO
import datetime

# Load models
models = {
    "XGBoost": joblib.load("models/xgboost_optimized_model.pkl"),
    "Random Forest": joblib.load("models/random_forest_model.pkl"),
    "Logistic Regression": joblib.load("models/logistic_model.pkl")
}

# Load feature config
with open("models/model_features.json", "r") as f:
    model_features = json.load(f)

# Default to XGBoost
model_choice = st.sidebar.selectbox("🔀 Select Model", list(models.keys()))
model = models[model_choice]

# SHAP explainer (for XGBoost only)
explainer = shap.TreeExplainer(models["XGBoost"])

# Language toggle
languages = {
    "English": {
        "title": "🧠 Employee Attrition Predictor",
        "description": "Predict whether an employee is likely to leave based on workplace features. Built with interpretable AI.",
        "recommendations": {
            "high": "🔎 Consider career path conversations, mentoring, or reducing workload to improve retention.",
            "moderate": "🧭 Suggest regular check-ins with the manager or job crafting discussions.",
            "low": "🎉 Continue to support the employee’s current engagement level."
        },
        "at_risk": "🔴 At Risk of Leaving",
        "likely_stay": "🟢 Likely to Stay",
        "risk_labels": ["Low", "Moderate", "High"]
    },
    "Urdu": {
        "title": "🧠 ملازم چھوڑنے کا پیشگوئی کرنے والا نظام",
        "description": "یہ ماڈل اندازہ لگاتا ہے کہ کوئی ملازم کمپنی چھوڑ سکتا ہے یا نہیں، AI کی مدد سے۔",
        "recommendations": {
            "high": "🔎 ملازمت میں ترقی، سرپرستی، یا کام کا بوجھ کم کرنے پر غور کریں۔",
            "moderate": "🧭 مینیجر سے باقاعدہ ملاقات یا کام کی تنظیم کی تجویز دیں۔",
            "low": "🎉 موجودہ انگیجمنٹ کی سطح کو برقرار رکھیں۔"
        },
        "at_risk": "🔴 چھوڑنے کے خطرے میں",
        "likely_stay": "🟢 کمپنی کے ساتھ رہنے کا امکان",
        "risk_labels": ["کم", "درمیانہ", "زیادہ"]
    }
}

lang = st.sidebar.selectbox("🌐 Language", list(languages.keys()))
L = languages[lang]

st.set_page_config(page_title=L["title"], layout="centered")
st.title(L["title"])
st.markdown(L["description"])

# Session state
if "history" not in st.session_state:
    st.session_state["history"] = []
if "show_chatbot" not in st.session_state:
    st.session_state["show_chatbot"] = False

# Upload
st.sidebar.subheader("📂 Upload CSV for Bulk Prediction")
uploaded_file = st.sidebar.file_uploader("Upload employee data (.csv)", type="csv")

st.sidebar.header("📋 Enter Employee Information")
use_sample = st.checkbox("🔁 Use Sample Employee Data")

# User input form
def user_input():
    if use_sample:
        data = {
            'Age': 28,
            'MonthlyIncome': 4800,
            'OverTime_Yes': 1,
            'JobSatisfaction': 2,
            'EnvironmentSatisfaction': 2,
            'DistanceFromHome': 20,
            'BusinessTravel_Travel_Frequently': 1,
            'NumCompaniesWorked': 4,
            'StockOptionLevel': 0,
            'YearsWithCurrManager': 1,
            'WorkLifeBalance': 2
        }
    else:
        data = {
            'Age': st.sidebar.slider("Age", 18, 60, 35),
            'MonthlyIncome': st.sidebar.slider("Monthly Income", 1000, 20000, 5000),
            'OverTime_Yes': 1 if st.sidebar.selectbox("Works Overtime?", ["Yes", "No"]) == "Yes" else 0,
            'JobSatisfaction': st.sidebar.slider("Job Satisfaction (1-4)", 1, 4, 3),
            'EnvironmentSatisfaction': st.sidebar.slider("Environment Satisfaction (1-4)", 1, 4, 3),
            'DistanceFromHome': st.sidebar.slider("Distance From Home (km)", 1, 50, 10),
            'BusinessTravel_Travel_Frequently': 1 if st.sidebar.selectbox("Travels Frequently?", ["Yes", "No"]) == "Yes" else 0,
            'NumCompaniesWorked': st.sidebar.slider("Number of Companies Worked", 0, 10, 2),
            'StockOptionLevel': st.sidebar.slider("Stock Option Level (0-3)", 0, 3, 1),
            'YearsWithCurrManager': st.sidebar.slider("Years with Current Manager", 0, 20, 4),
            'WorkLifeBalance': st.sidebar.slider("Work-Life Balance (1-4)", 1, 4, 3)
        }

    if st.sidebar.button("🔄 Reset Form"):
        st.rerun()

    return pd.DataFrame([data])

# Prediction logic
if uploaded_file:
    input_df = pd.read_csv(uploaded_file)
    input_df = input_df.reindex(columns=model_features)
    predictions = model.predict(input_df)
    probabilities = model.predict_proba(input_df)[:, 1]

    st.subheader("📊 Batch Prediction Results")
    results_df = input_df.copy()
    results_df["Attrition"] = np.where(predictions == 1, "Yes", "No")
    results_df["Risk Probability"] = np.round(probabilities * 100, 2).astype(str) + "%"
    st.dataframe(results_df)
else:
    input_df = user_input()
    input_df = input_df.reindex(columns=model_features)
    prediction = model.predict(input_df)[0]
    probability = model.predict_proba(input_df)[0][1]

    st.subheader("🎯 Prediction Result")
    if prediction == 1:
        st.error(f"{L['at_risk']} ({probability:.2%})")
    else:
        st.success(f"{L['likely_stay']} ({1 - probability:.2%})")

    label = L["risk_labels"][2] if probability > 0.7 else L["risk_labels"][1] if probability > 0.4 else L["risk_labels"][0]
    st.metric("Risk Category", label)

    st.markdown("### 🧠 HR Recommendation")
    if probability > 0.7:
        st.warning(L["recommendations"]["high"])
    elif probability > 0.4:
        st.info(L["recommendations"]["moderate"])
    else:
        st.success(L["recommendations"]["low"])

    if model_choice == "XGBoost":
        st.markdown("### 📌 SHAP Feature Impact Viewer")
        shap_values = explainer.shap_values(input_df)
        feature = st.selectbox("Select a feature to explain", input_df.columns)
        shap.dependence_plot(feature, shap_values, input_df, interaction_index=None, show=False)
        fig = plt.gcf()
        st.pyplot(fig)

    if st.button("💾 Add to Prediction History"):
        record = {
            "Model": model_choice,
            "Age": input_df.iloc[0]["Age"],
            "MonthlyIncome": input_df.iloc[0]["MonthlyIncome"],
            "OverTime": "Yes" if input_df.iloc[0]["OverTime_Yes"] == 1 else "No",
            "Prediction": "Yes" if prediction == 1 else "No",
            "Risk": f"{probability:.2%}"
        }
        st.session_state["history"].append(record)
        st.success("Prediction saved to history.")

if st.session_state["history"]:
    st.subheader("📚 Prediction History")
    history_df = pd.DataFrame(st.session_state["history"])
    st.dataframe(history_df)

    csv = history_df.to_csv(index=False).encode("utf-8")
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M")
    st.download_button("⬇️ Download History as CSV", csv, file_name=f"prediction_history_{timestamp}.csv", mime="text/csv")

st.sidebar.markdown("---")
st.sidebar.subheader("🧑‍🏫 Need Help?")
if st.sidebar.button("🗨️ Show Chatbot Guidance"):
    st.session_state["show_chatbot"] = not st.session_state["show_chatbot"]

if st.session_state["show_chatbot"]:
    st.markdown("### 🤖 HR Assistant")
    with st.expander("Why does overtime increase attrition risk?"):
        st.write("Employees working overtime may experience burnout or work-life imbalance, increasing their likelihood to leave.")
    with st.expander("How can I reduce attrition for high-risk employees?"):
        st.write("You can initiate manager check-ins, offer internal mobility, or review compensation alignment.")
    with st.expander("Why are SHAP plots useful?"):
        st.write("SHAP plots show how much each feature influenced the prediction, supporting fair and data-informed HR decisions.")