# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11h6geLYLy0_MeC01-TCQQMUfylKt9haD
"""

# app.py

import streamlit as st
import pandas as pd
import numpy as np
import joblib
import shap
import matplotlib.pyplot as plt

# Load model
model = joblib.load("models/xgboost_optimized_model.pkl")
explainer = shap.TreeExplainer(model)

st.set_page_config(page_title="Employee Attrition Predictor", layout="centered")
st.title("ðŸ§  Employee Attrition Predictor")
st.markdown("Predict whether an employee is likely to leave based on workplace factors.")

# Sidebar Input
st.sidebar.header("Enter Employee Information")

def user_input():
    Age = st.sidebar.slider("Age", 18, 60, 35)
    MonthlyIncome = st.sidebar.slider("Monthly Income", 1000, 20000, 5000)
    OverTime_Yes = st.sidebar.selectbox("Works Overtime?", ["Yes", "No"])
    JobSatisfaction = st.sidebar.slider("Job Satisfaction (1-4)", 1, 4, 3)
    EnvironmentSatisfaction = st.sidebar.slider("Environment Satisfaction (1-4)", 1, 4, 3)
    DistanceFromHome = st.sidebar.slider("Distance From Home (km)", 1, 50, 10)
    BusinessTravel_Travel_Frequently = st.sidebar.selectbox("Travels Frequently?", ["Yes", "No"])
    NumCompaniesWorked = st.sidebar.slider("Number of Companies Worked", 0, 10, 2)
    StockOptionLevel = st.sidebar.slider("Stock Option Level (0-3)", 0, 3, 1)
    YearsWithCurrManager = st.sidebar.slider("Years with Current Manager", 0, 20, 4)
    WorkLifeBalance = st.sidebar.slider("Work-Life Balance (1-4)", 1, 4, 3)

    data = {
        'Age': Age,
        'MonthlyIncome': MonthlyIncome,
        'OverTime_Yes': 1 if OverTime_Yes == "Yes" else 0,
        'JobSatisfaction': JobSatisfaction,
        'EnvironmentSatisfaction': EnvironmentSatisfaction,
        'DistanceFromHome': DistanceFromHome,
        'BusinessTravel_Travel_Frequently': 1 if BusinessTravel_Travel_Frequently == "Yes" else 0,
        'NumCompaniesWorked': NumCompaniesWorked,
        'StockOptionLevel': StockOptionLevel,
        'YearsWithCurrManager': YearsWithCurrManager,
        'WorkLifeBalance': WorkLifeBalance
    }

    return pd.DataFrame([data])

input_df = user_input()

# Prediction
prediction = model.predict(input_df)[0]
probability = model.predict_proba(input_df)[0][1]

# Display result
st.subheader("Prediction Result")
st.write("Attrition Prediction:", "ðŸ”´ Yes" if prediction == 1 else "ðŸŸ¢ No")
st.write("Probability of Leaving:", f"{probability:.2%}")

# SHAP Plot
st.subheader("Model Explanation (SHAP)")
shap_values = explainer.shap_values(input_df)

st.set_option('deprecation.showPyplotGlobalUse', False)
plt.title("Feature Impact on Prediction")
shap.force_plot(explainer.expected_value, shap_values[0], input_df.iloc[0], matplotlib=True, show=False)
st.pyplot(bbox_inches="tight")