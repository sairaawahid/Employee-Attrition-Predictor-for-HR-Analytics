# -*- coding: utf-8 -*-
"""employee-attrition-predictor-app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11h6geLYLy0_MeC01-TCQQMUfylKt9haD
"""

# app.py


# -------------- Imports --------------
import streamlit as st
import pandas as pd
import numpy as np
import joblib
import shap
import matplotlib.pyplot as plt
import datetime

# -------------- Language Toggle Setup --------------
languages = {
    "en": {
        "title": "🧠 Employee Attrition Predictor",
        "description": "Predict if an employee is at risk of leaving, using psychological and organizational data.",
        "select_model": "Select Model",
        "reset": "🔄 Reset Form",
        "predict": "📊 Predict Attrition Risk",
        "download": "📥 Download Prediction History",
        "shap_toggle": "🔍 Show SHAP Explanation",
        "recommendations": "💡 HR Recommendations",
        "chat_help": "💬 Need help interpreting this result?",
        "sample_data": "🔁 Use Sample Employee Data",
        "lang_toggle": "🌐 Select Language"
    },
    "ur": {
        "title": "🧠 ملازم استعفیٰ پیش گوئی کا نظام",
        "description": "نفسیاتی اور تنظیمی ڈیٹا کی بنیاد پر ملازم کے استعفیٰ کا خطرہ معلوم کریں۔",
        "select_model": "ماڈل منتخب کریں",
        "reset": "🔄 فارم ری سیٹ کریں",
        "predict": "📊 استعفیٰ کا خطرہ معلوم کریں",
        "download": "📥 نتائج CSV میں محفوظ کریں",
        "shap_toggle": "🔍 تفصیل دیکھیں (SHAP)",
        "recommendations": "💡 HR تجاویز",
        "chat_help": "💬 کیا آپ کو مدد درکار ہے؟",
        "sample_data": "🔁 نمونہ ڈیٹا استعمال کریں",
        "lang_toggle": "🌐 زبان منتخب کریں"
    }
}

# Session state for language toggle
if "lang" not in st.session_state:
    st.session_state["lang"] = "en"

lang = st.sidebar.selectbox("🌐 Language", ["en", "ur"], index=0)
st.session_state["lang"] = lang
L = languages[lang]

# -------------- App Title --------------
st.title(L["title"])
st.write(L["description"])

# -------------- Load Models --------------
models = {
    "XGBoost": joblib.load("xgboost_optimized_model.pkl"),
    "Random Forest": joblib.load("random_forest_model.pkl"),
    "Logistic Regression": joblib.load("logistic_model.pkl")
}

model_name = st.sidebar.selectbox(L["select_model"], list(models.keys()))
model = models[model_name]
explainer = shap.Explainer(model)

# -------------- Input Fields --------------
sample_input = {
    "Age": 35,
    "MonthlyIncome": 6000,
    "DistanceFromHome": 10,
    "JobSatisfaction": 3,
    "YearsAtCompany": 5,
    "OverTime": 1
}

def user_input():
    use_sample = st.sidebar.checkbox(L["sample_data"])
    if use_sample:
        return pd.DataFrame([sample_input])

    age = st.sidebar.slider("Age", 18, 60, 35, help="Employee's age in years.")
    income = st.sidebar.slider("Monthly Income", 1000, 20000, 6000, help="Monthly salary in USD.")
    distance = st.sidebar.slider("Distance From Home", 1, 50, 10, help="Commute distance in km.")
    satisfaction = st.sidebar.slider("Job Satisfaction (1-4)", 1, 4, 3, help="Self-rated satisfaction.")
    years = st.sidebar.slider("Years At Company", 0, 40, 5, help="Years with company.")
    overtime = st.sidebar.radio("OverTime", ["Yes", "No"])
    overtime_bin = 1 if overtime == "Yes" else 0

    return pd.DataFrame([{
        "Age": age,
        "MonthlyIncome": income,
        "DistanceFromHome": distance,
        "JobSatisfaction": satisfaction,
        "YearsAtCompany": years,
        "OverTime": overtime_bin
    }])

input_df = user_input()

# -------------- Predict Button --------------
if st.button(L["predict"]):
    probability = model.predict_proba(input_df)[0][1]
    prediction = model.predict(input_df)[0]

    if probability >= 0.6:
        label = "🔴 High Risk"
    elif probability >= 0.3:
        label = "🟡 Moderate Risk"
    else:
        label = "🟢 Low Risk"

    st.metric("Attrition Risk", f"{probability:.2%}", label)

    # HR Recommendations
    st.subheader(L["recommendations"])
    if probability >= 0.6:
        st.warning("🔴 Consider mentoring, growth paths, burnout reduction.")
    elif probability >= 0.3:
        st.info("🟡 Monitor and offer flexible work or role discussions.")
    else:
        st.success("🟢 Employee shows no major risk signs.")

    # Save to session
    if "history" not in st.session_state:
        st.session_state["history"] = []
    st.session_state["history"].append({
        "Model": model_name,
        "Risk": label,
        "Probability": f"{probability:.2%}",
        "Time": str(datetime.datetime.now())
    })

# -------------- Batch Prediction --------------
uploaded = st.sidebar.file_uploader("📂 Upload CSV for Batch Prediction", type=["csv"])
if uploaded:
    df = pd.read_csv(uploaded)
    preds = model.predict_proba(df)[:, 1]
    df["Attrition Probability"] = preds
    st.subheader("📋 Batch Prediction Results")
    st.dataframe(df)

# -------------- Download History --------------
if "history" in st.session_state and st.button(L["download"]):
    hist_df = pd.DataFrame(st.session_state["history"])
    st.download_button("📥 Save CSV", hist_df.to_csv(index=False), file_name="prediction_history.csv")

# -------------- SHAP Visualizations --------------
if st.checkbox(L["shap_toggle"]):
    shap_values = explainer(input_df)

    st.subheader("🔍 SHAP Force Plot")
    plt.clf()
    shap.plots.force(shap_values[0], matplotlib=True, show=False)
    st.pyplot(plt.gcf())

    st.subheader("📈 SHAP Feature Importance (Bar)")
    plt.clf()
    shap.plots.bar(shap_values, show=False)
    st.pyplot(plt.gcf())

    st.subheader("🌈 SHAP Beeswarm Plot")
    plt.clf()
    shap.plots.beeswarm(shap_values, show=False)
    st.pyplot(plt.gcf())

    feature = st.selectbox("🎯 SHAP Dependence Plot", input_df.columns)
    plt.clf()
    shap.plots.scatter(shap_values[:, feature], color=shap_values)
    st.pyplot(plt.gcf())

# -------------- Chatbot-Style HR Assistant --------------
with st.expander(L["chat_help"]):
    st.markdown("""
    - **Why this prediction?** → See SHAP graphs above for contributing factors.
    - **What HR can do:** → Prioritize low satisfaction, long tenure, or high overtime signals.
    - **How the model works:** → Predictions based on patterns learned from HR data.
    """)

# -------------- Reset Button --------------
if st.sidebar.button(L["reset"]):
    st.session_state.clear()
    st.rerun()